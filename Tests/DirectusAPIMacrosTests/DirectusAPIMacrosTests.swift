import SwiftSyntaxMacros
import SwiftSyntaxMacrosTestSupport
import XCTest

#if canImport(DirectusAPIMacrosImpl)
@testable import DirectusAPIMacrosImpl
#endif

final class DirectusAPIMacrosTests: XCTestCase {

#if canImport(DirectusAPIMacrosImpl)
    private let testMacros: [String: Macro.Type] = [
        "DirectusClassRegistration": DirectusClassRegistration.self,
        "DirectusAddToCollectionList": DirectusAddToCollectionList.self
    ]
    
    private class Test1 {}
    private class Test2 {}
    private class Test3 {}
#endif

    
    func testDirectusClassRegistrationWithMinimumArguments() throws {
#if canImport(DirectusAPIMacrosImpl)
        assertMacroExpansion(
            """
            @DirectusClassRegistration(endpointName: "roles")
            class TestingMacro: DirectusData, DirectusCollection, Codable {
                var name: String
            }
            """,
            expandedSource: """
            class TestingMacro: DirectusData, DirectusCollection, Codable {
                var name: String
            
                // Generated by @DirectusClassRegistration macro
                public static let collectionMetadata = CollectionMetadata(
                    endpointName: "roles",
                    defaultFields: "*",
                    endpointPrefix: "/items/",
                    webSocketEndPoint: nil,
                    defaultUpdateFields: nil
                )
            
                // Generated by @DirectusClassRegistration macro
                public static var _register: Void {
                    CollectionMetadataRegistry.register(Self.self)
                }
            
                // Generated by @DirectusClassRegistration macro
                required init(_ rawReceivedData: [String : Any]) throws {
                    self.name = rawReceivedData["name"] as? String ?? ""
                    try super.init(rawReceivedData)
                }
            }
            """,
            macros: testMacros
        )
#else
        throw XCTSkip("macros are only supported when running tests for the host platform")
#endif
    }
    
    func testDirectusClassRegistrationOnANonClass() throws {
#if canImport(DirectusAPIMacrosImpl)
        assertMacroExpansion(
            """
            @DirectusClassRegistration(endpointName: "roles")
            struct TestingMacro: DirectusData, DirectusCollection, Codable {
                var name: String
            }
            """,
            expandedSource: """
            struct TestingMacro: DirectusData, DirectusCollection, Codable {
                var name: String
            }
            """,
            diagnostics: [
                DiagnosticSpec(message: "@DirectusClassRegistration can only be applied to classes", line: 1, column: 1)
            ],
            macros: testMacros
        )
#else
        throw XCTSkip("macros are only supported when running tests for the host platform")
#endif
    }

    func testDirectusClassRegistrationOnAClassNotConfirmingToDirectusData() throws {
#if canImport(DirectusAPIMacrosImpl)
        assertMacroExpansion(
            """
            @DirectusClassRegistration(endpointName: "roles")
            class TestingMacro: DirectusCollection, Codable {
                var name: String
            }
            """,
            expandedSource: """
            class TestingMacro: DirectusCollection, Codable {
                var name: String
            }
            """,
            diagnostics: [
                DiagnosticSpec(message: "@DirectusClassRegistration can only be applied to class conforming to protocol 'DirectusData'", line: 1, column: 1)
            ],
            macros: testMacros
        )
#else
        throw XCTSkip("macros are only supported when running tests for the host platform")
#endif
    }
    
    func testDirectusClassRegistrationOnAClassNotConfirmingToDirectusCollection() throws {
#if canImport(DirectusAPIMacrosImpl)
        assertMacroExpansion(
            """
            @DirectusClassRegistration(endpointName: "roles")
            class TestingMacro: DirectusData, Codable {
                var name: String
            }
            """,
            expandedSource: """
            class TestingMacro: DirectusData, Codable {
                var name: String
            }
            """,
            diagnostics: [
                DiagnosticSpec(message: "@DirectusClassRegistration can only be applied to class conforming to protocol 'DirectusCollection'", line: 1, column: 1)
            ],
            macros: testMacros
        )
#else
        throw XCTSkip("macros are only supported when running tests for the host platform")
#endif
    }
    
    func testDirectusClassRegistrationWithAllProvidedArguments() throws {
#if canImport(DirectusAPIMacrosImpl)
        assertMacroExpansion(
            """
            @DirectusClassRegistration(
                endpointName: "name",
                defaultFields: "id,users.*,first_name",
                endpointPrefix: "/test/",
                webSocketEndPoint: "ws",
                defaultUpdateFields: "name,username"
            )
            class TestingMacro: DirectusData, DirectusCollection, Codable {
                var name: String
            }
            """,
            expandedSource: """
            class TestingMacro: DirectusData, DirectusCollection, Codable {
                var name: String
            
                // Generated by @DirectusClassRegistration macro
                public static let collectionMetadata = CollectionMetadata(
                    endpointName: "name",
                    defaultFields: "id,users.*,first_name",
                    endpointPrefix: "/test/",
                    webSocketEndPoint: "ws",
                    defaultUpdateFields: "name,username"
                )
            
                // Generated by @DirectusClassRegistration macro
                public static var _register: Void {
                    CollectionMetadataRegistry.register(Self.self)
                }
            
                // Generated by @DirectusClassRegistration macro
                required init(_ rawReceivedData: [String : Any]) throws {
                    self.name = rawReceivedData["name"] as? String ?? ""
                    try super.init(rawReceivedData)
                }
            }
            """,
            macros: testMacros
        )
#else
        throw XCTSkip("macros are only supported when running tests for the host platform")
#endif
    }
    
    func testDirectusClassRegistrationWithDifferentVariablesTypes() throws {
#if canImport(DirectusAPIMacrosImpl)
        assertMacroExpansion(
            """
            @DirectusClassRegistration(endpointName: "name")
            class TestingMacro: DirectusData, DirectusCollection, Codable {
                var string: String
                var optionalString: String?
                var optionalArrayOfStrings: [String]?
                var optionalStringArray: [String?]
                var optionalArrayOfOptionalStrings: [String?]?
                var integer: Int
                var optionalInteger: Int?
                var optionalArrayOfIntegers: [Int]?
                var optionalIntegerArray: [Int?]
                var optionalArrayOfOptionalIntegers: [Int?]?
            }
            """,
            expandedSource: """
            class TestingMacro: DirectusData, DirectusCollection, Codable {
                var string: String
                var optionalString: String?
                var optionalArrayOfStrings: [String]?
                var optionalStringArray: [String?]
                var optionalArrayOfOptionalStrings: [String?]?
                var integer: Int
                var optionalInteger: Int?
                var optionalArrayOfIntegers: [Int]?
                var optionalIntegerArray: [Int?]
                var optionalArrayOfOptionalIntegers: [Int?]?
            
                // Generated by @DirectusClassRegistration macro
                public static let collectionMetadata = CollectionMetadata(
                    endpointName: "name",
                    defaultFields: "*",
                    endpointPrefix: "/items/",
                    webSocketEndPoint: nil,
                    defaultUpdateFields: nil
                )
            
                // Generated by @DirectusClassRegistration macro
                public static var _register: Void {
                    CollectionMetadataRegistry.register(Self.self)
                }
            
                // Generated by @DirectusClassRegistration macro
                required init(_ rawReceivedData: [String : Any]) throws {
                    self.string = rawReceivedData["string"] as? String ?? ""
                    self.optionalString = rawReceivedData["optionalString"] as? String? ?? nil
                    self.optionalArrayOfStrings = rawReceivedData["optionalArrayOfStrings"] as? [String]? ?? nil
                    self.optionalStringArray = rawReceivedData["optionalStringArray"] as? [String?] ?? nil
                    self.optionalArrayOfOptionalStrings = rawReceivedData["optionalArrayOfOptionalStrings"] as? [String?]? ?? nil
                    self.integer = rawReceivedData["integer"] as? Int ?? 0
                    self.optionalInteger = rawReceivedData["optionalInteger"] as? Int? ?? nil
                    self.optionalArrayOfIntegers = rawReceivedData["optionalArrayOfIntegers"] as? [Int]? ?? nil
                    self.optionalIntegerArray = rawReceivedData["optionalIntegerArray"] as? [Int?] ?? nil
                    self.optionalArrayOfOptionalIntegers = rawReceivedData["optionalArrayOfOptionalIntegers"] as? [Int?]? ?? nil
                    try super.init(rawReceivedData)
                }
            }
            """,
            macros: testMacros
        )
#else
        throw XCTSkip("macros are only supported when running tests for the host platform")
#endif
    }
    
    func testDirectusAddToCollectionListToAView() throws {
#if canImport(DirectusAPIMacrosImpl)
        assertMacroExpansion(
            """
            @DirectusAddToCollectionList(Test1.self, Test2.self, Test3.self)
            struct TestView: View {
                var body: some View {
                    VStack {
                        HStack(spacing: 12) {
                            Text("Hello, World!")
                            Text("Another Test View")
                        }
                    }
                    HStack {
                        Text("Second view in body")
                    }
                    .task {
                        MetadataFactory.registerDirectusCollections()
                    }
                }
            }
            """,
            expandedSource: """
            struct TestView: View {
                var body: some View {
                    VStack {
                        HStack(spacing: 12) {
                            Text("Hello, World!")
                            Text("Another Test View")
                        }
                    }
                    HStack {
                        Text("Second view in body")
                    }
                    .task {
                        MetadataFactory.registerDirectusCollections()
                    }
                }
            
                // Generated by @DirectusAddToCollectionList macro
                enum MetadataFactory {
                    @MainActor static func registerDirectusCollections() {
                        CollectionMetadataRegistry.register(Test1.self)
                        CollectionMetadataRegistry.register(Test2.self)
                        CollectionMetadataRegistry.register(Test3.self)
                    }
                }
            }
            """,
            macros: testMacros
        )
#else
        throw XCTSkip("macros are only supported when running tests for the host platform")
#endif
    }
    
    func testDirectusAddToCollectionListToTheMainView() throws {
#if canImport(DirectusAPIMacrosImpl)
        assertMacroExpansion(
            """
            @DirectusAddToCollectionList(Test1.self, Test2.self, Test3.self)
            @main
            struct MyApp: App {
                var body: some Scene {
                    WindowGroup {
                        Group {
                            ContentView()
                                .task {
                                    MetadataFactory.registerDirectusCollections()
                                }
                        }
                    }
                }
            }
            """,
            expandedSource: """
            @main
            struct MyApp: App {
                var body: some Scene {
                    WindowGroup {
                        Group {
                            ContentView()
                                .task {
                                    MetadataFactory.registerDirectusCollections()
                                }
                        }
                    }
                }
            
                // Generated by @DirectusAddToCollectionList macro
                enum MetadataFactory {
                    @MainActor static func registerDirectusCollections() {
                        CollectionMetadataRegistry.register(Test1.self)
                        CollectionMetadataRegistry.register(Test2.self)
                        CollectionMetadataRegistry.register(Test3.self)
                    }
                }
            }
            """,
            macros: testMacros
        )
#else
        throw XCTSkip("macros are only supported when running tests for the host platform")
#endif
    }
    
    func testDirectusAddToCollectionListToAClass() throws {
#if canImport(DirectusAPIMacrosImpl)
        assertMacroExpansion(
            """
            @DirectusAddToCollectionList(Test1.self, Test2.self, Test3.self)
            class MyApp {
                var test: String = ""
            }
            """,
            expandedSource: """
            class MyApp {
                var test: String = ""
            }
            """,
            diagnostics: [
                DiagnosticSpec(message: "@DirectusAddToCollectionList can only be applied to views", line: 1, column: 1)
            ],
            macros: testMacros
        )
#else
        throw XCTSkip("macros are only supported when running tests for the host platform")
#endif
    }
}
